From 0a45b262883da74db4f411478b175240a0cc1b92 Mon Sep 17 00:00:00 2001
From: Austin Morton <austin.morton@aquatic.com>
Date: Fri, 29 Aug 2025 00:12:05 +0300
Subject: [PATCH 05/11] Vendor grpc 1.67.1

---
 bazel/ray_deps_setup.bzl                      | 28 ++++++++-----------
 .../task_event_buffer_export_event_test.cc    |  2 +-
 .../tests/gcs_actor_manager_test.cc           | 14 +++++-----
 src/ray/raylet_client/raylet_client.cc        |  2 +-
 src/ray/rpc/server_call.h                     |  2 +-
 src/ray/util/event.cc                         |  2 +-
 thirdparty/patches/grpc-zlib-fdopen.patch     |  4 +--
 7 files changed, 25 insertions(+), 29 deletions(-)

diff --git a/bazel/ray_deps_setup.bzl b/bazel/ray_deps_setup.bzl
index 5ece022cdb..ce365f9a34 100644
--- a/bazel/ray_deps_setup.bzl
+++ b/bazel/ray_deps_setup.bzl
@@ -91,15 +91,11 @@ def ray_deps_setup():
     # Pinned grpc version: v23.4
     http_archive(
         name = "com_google_protobuf",
-        sha256 = "76a33e2136f23971ce46c72fd697cd94dc9f73d56ab23b753c3e16854c90ddfd",
-        strip_prefix = "protobuf-2c5fa078d8e86e5f4bd34e6f4c9ea9e8d7d4d44a",
+        sha256 = "b2340aa47faf7ef10a0328190319d3f3bee1b24f426d4ce8f4253b6f27ce16db",
+        strip_prefix = "protobuf-28.2",
         urls = [
-            "https://github.com/protocolbuffers/protobuf/archive/2c5fa078d8e86e5f4bd34e6f4c9ea9e8d7d4d44a.tar.gz",
+            "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v28.2.tar.gz",
         ],
-        patches = [
-            "@com_github_grpc_grpc//third_party:protobuf.patch",
-        ],
-        patch_args = ["-p1"],
     )
 
     # NOTE(lingxuan.zlx): 3rd party dependencies could be accessed, so it suggests
@@ -250,10 +246,10 @@ def ray_deps_setup():
     # TODO(owner): Upgrade abseil to latest version after protobuf updated, which requires to upgrade `rules_cc` first.
     auto_http_archive(
         name = "com_google_absl",
-        sha256 = "987ce98f02eefbaf930d6e38ab16aa05737234d7afbab2d5c4ea7adbe50c28ed",
-        strip_prefix = "abseil-cpp-20230802.1",
+        sha256 = "f50e5ac311a81382da7fa75b97310e4b9006474f9560ac46f54a9967f07d4ae3",
+        strip_prefix = "abseil-cpp-20240722.0",
         urls = [
-            "https://github.com/abseil/abseil-cpp/archive/refs/tags/20230802.1.tar.gz",
+            "https://github.com/abseil/abseil-cpp/archive/refs/tags/20240722.0.tar.gz",
         ],
     )
 
@@ -274,8 +270,8 @@ def ray_deps_setup():
     auto_http_archive(
         name = "com_github_grpc_grpc",
         # NOTE: If you update this, also update @boringssl's hash.
-        url = "https://github.com/grpc/grpc/archive/refs/tags/v1.57.1.tar.gz",
-        sha256 = "0762f809b9de845e6a7c809cabccad6aa4143479fd43b396611fe5a086c0aeeb",
+        url = "https://github.com/grpc/grpc/archive/refs/tags/v1.67.1.tar.gz",
+        sha256 = "d74f8e99a433982a12d7899f6773e285c9824e1d9a173ea1d1fb26c9bd089299",
         patches = [
             "@io_ray//thirdparty/patches:grpc-cython-copts.patch",
             "@io_ray//thirdparty/patches:grpc-zlib-fdopen.patch",
@@ -319,13 +315,13 @@ def ray_deps_setup():
     http_archive(
         # This rule is used by @com_github_grpc_grpc, and using a GitHub mirror
         # provides a deterministic archive hash for caching. Explanation here:
-        # https://github.com/grpc/grpc/blob/1ff1feaa83e071d87c07827b0a317ffac673794f/bazel/grpc_deps.bzl#L189
         # Ensure this rule matches the rule used by grpc's bazel/grpc_deps.bzl
+        # https://github.com/grpc/grpc/blob/v1.67.1/bazel/grpc_deps.bzl#L33
         name = "boringssl",
-        sha256 = "0675a4f86ce5e959703425d6f9063eaadf6b61b7f3399e77a154c0e85bad46b1",
-        strip_prefix = "boringssl-342e805bc1f5dfdd650e3f031686d6c939b095d9",
+        sha256 = "c70d519e4ee709b7a74410a5e3a937428b8198d793a3d771be3dd2086ae167c8",
+        strip_prefix = "boringssl-b8b3e6e11166719a8ebfa43c0cde9ad7d57a84f6",
         urls = [
-            "https://github.com/google/boringssl/archive/342e805bc1f5dfdd650e3f031686d6c939b095d9.tar.gz",
+            "https://github.com/google/boringssl/archive/b8b3e6e11166719a8ebfa43c0cde9ad7d57a84f6.tar.gz",
         ],
     )
 
diff --git a/src/ray/core_worker/tests/task_event_buffer_export_event_test.cc b/src/ray/core_worker/tests/task_event_buffer_export_event_test.cc
index 9e6345bd95..99f6f0cafb 100644
--- a/src/ray/core_worker/tests/task_event_buffer_export_event_test.cc
+++ b/src/ray/core_worker/tests/task_event_buffer_export_event_test.cc
@@ -153,7 +153,7 @@ TEST_F(TaskEventTestWriteExport, TestWriteTaskExportEvents) {
   auto task_ids = GenTaskIDs(num_events);
   google::protobuf::util::JsonPrintOptions options;
   options.preserve_proto_field_names = true;
-  options.always_print_primitive_fields = true;
+  options.always_print_fields_with_no_presence = true;
 
   std::vector<SourceTypeVariant> source_types = {
       rpc::ExportEvent_SourceType::ExportEvent_SourceType_EXPORT_TASK};
diff --git a/src/ray/gcs/gcs_server/tests/gcs_actor_manager_test.cc b/src/ray/gcs/gcs_server/tests/gcs_actor_manager_test.cc
index 3030856998..2b11a89296 100644
--- a/src/ray/gcs/gcs_server/tests/gcs_actor_manager_test.cc
+++ b/src/ray/gcs/gcs_server/tests/gcs_actor_manager_test.cc
@@ -1199,7 +1199,7 @@ TEST_F(GcsActorManagerTest, TestGetAllActorInfoFilters) {
     request.mutable_filters()->set_actor_id(actor->GetActorID().Binary());
 
     auto &reply =
-        *google::protobuf::Arena::CreateMessage<rpc::GetAllActorInfoReply>(&arena);
+        *google::protobuf::Arena::Create<rpc::GetAllActorInfoReply>(&arena);
     gcs_actor_manager_->HandleGetAllActorInfo(request, &reply, callback);
     ASSERT_EQ(reply.actor_table_data().size(), 1);
     ASSERT_EQ(reply.total(), 1 + num_other_actors);
@@ -1212,7 +1212,7 @@ TEST_F(GcsActorManagerTest, TestGetAllActorInfoFilters) {
     request.mutable_filters()->set_job_id(job_id.Binary());
 
     auto &reply =
-        *google::protobuf::Arena::CreateMessage<rpc::GetAllActorInfoReply>(&arena);
+        *google::protobuf::Arena::Create<rpc::GetAllActorInfoReply>(&arena);
     gcs_actor_manager_->HandleGetAllActorInfo(request, &reply, callback);
     ASSERT_EQ(reply.actor_table_data().size(), 1);
     ASSERT_EQ(reply.num_filtered(), num_other_actors);
@@ -1224,7 +1224,7 @@ TEST_F(GcsActorManagerTest, TestGetAllActorInfoFilters) {
     request.mutable_filters()->set_state(rpc::ActorTableData::ALIVE);
 
     auto &reply =
-        *google::protobuf::Arena::CreateMessage<rpc::GetAllActorInfoReply>(&arena);
+        *google::protobuf::Arena::Create<rpc::GetAllActorInfoReply>(&arena);
     gcs_actor_manager_->HandleGetAllActorInfo(request, &reply, callback);
     ASSERT_EQ(reply.actor_table_data().size(), 1);
     ASSERT_EQ(reply.num_filtered(), num_other_actors);
@@ -1237,7 +1237,7 @@ TEST_F(GcsActorManagerTest, TestGetAllActorInfoFilters) {
     request.mutable_filters()->set_job_id(job_id.Binary());
 
     auto &reply =
-        *google::protobuf::Arena::CreateMessage<rpc::GetAllActorInfoReply>(&arena);
+        *google::protobuf::Arena::Create<rpc::GetAllActorInfoReply>(&arena);
     gcs_actor_manager_->HandleGetAllActorInfo(request, &reply, callback);
     ASSERT_EQ(reply.actor_table_data().size(), 1);
     ASSERT_EQ(reply.num_filtered(), num_other_actors);
@@ -1248,7 +1248,7 @@ TEST_F(GcsActorManagerTest, TestGetAllActorInfoFilters) {
     request.mutable_filters()->set_job_id(job_id.Binary());
 
     auto &reply =
-        *google::protobuf::Arena::CreateMessage<rpc::GetAllActorInfoReply>(&arena);
+        *google::protobuf::Arena::Create<rpc::GetAllActorInfoReply>(&arena);
     gcs_actor_manager_->HandleGetAllActorInfo(request, &reply, callback);
     ASSERT_EQ(reply.num_filtered(), num_other_actors + 1);
     ASSERT_EQ(reply.actor_table_data().size(), 0);
@@ -1272,7 +1272,7 @@ TEST_F(GcsActorManagerTest, TestGetAllActorInfoLimit) {
   {
     rpc::GetAllActorInfoRequest request;
     auto &reply =
-        *google::protobuf::Arena::CreateMessage<rpc::GetAllActorInfoReply>(&arena);
+        *google::protobuf::Arena::Create<rpc::GetAllActorInfoReply>(&arena);
     auto callback = [](Status status,
                        std::function<void()> success,
                        std::function<void()> failure) {};
@@ -1281,7 +1281,7 @@ TEST_F(GcsActorManagerTest, TestGetAllActorInfoLimit) {
 
     request.set_limit(2);
     auto &reply_2 =
-        *google::protobuf::Arena::CreateMessage<rpc::GetAllActorInfoReply>(&arena);
+        *google::protobuf::Arena::Create<rpc::GetAllActorInfoReply>(&arena);
     gcs_actor_manager_->HandleGetAllActorInfo(request, &reply_2, callback);
     ASSERT_EQ(reply_2.actor_table_data().size(), 2);
     ASSERT_EQ(reply_2.total(), 3);
diff --git a/src/ray/raylet_client/raylet_client.cc b/src/ray/raylet_client/raylet_client.cc
index bfb8b0665d..f377bfec23 100644
--- a/src/ray/raylet_client/raylet_client.cc
+++ b/src/ray/raylet_client/raylet_client.cc
@@ -44,7 +44,7 @@ void RayletClient::RequestWorkerLease(
     const bool is_selected_based_on_locality) {
   google::protobuf::Arena arena;
   auto request =
-      google::protobuf::Arena::CreateMessage<rpc::RequestWorkerLeaseRequest>(&arena);
+      google::protobuf::Arena::Create<rpc::RequestWorkerLeaseRequest>(&arena);
   // The unsafe allocating here is actually safe because the life-cycle of
   // task_spec is longer than request.
   // Request will be sent before the end of this call, and after that, it won't be
diff --git a/src/ray/rpc/server_call.h b/src/ray/rpc/server_call.h
index a2e7cd2cee..f3dea61850 100644
--- a/src/ray/rpc/server_call.h
+++ b/src/ray/rpc/server_call.h
@@ -193,7 +193,7 @@ class ServerCallImpl : public ServerCall {
         cluster_id_(cluster_id),
         start_time_(0),
         record_metrics_(record_metrics) {
-    reply_ = google::protobuf::Arena::CreateMessage<Reply>(&arena_);
+    reply_ = google::protobuf::Arena::Create<Reply>(&arena_);
     // TODO(Yi Cheng) call_name_ sometimes get corrunpted due to memory issues.
     RAY_CHECK(!call_name_.empty()) << "Call name is empty";
     if (record_metrics_) {
diff --git a/src/ray/util/event.cc b/src/ray/util/event.cc
index e704c86847..08a79db77f 100644
--- a/src/ray/util/event.cc
+++ b/src/ray/util/event.cc
@@ -138,7 +138,7 @@ std::string LogEventReporter::ExportEventToString(const rpc::ExportEvent &export
   google::protobuf::util::JsonPrintOptions options;
   options.preserve_proto_field_names = true;
   // Required so enum with value 0 is not omitted
-  options.always_print_primitive_fields = true;
+  options.always_print_fields_with_no_presence = true;
   if (export_event.has_task_event_data()) {
     RAY_CHECK(google::protobuf::util::MessageToJsonString(
                   export_event.task_event_data(), &event_data_as_string, options)
diff --git a/thirdparty/patches/grpc-zlib-fdopen.patch b/thirdparty/patches/grpc-zlib-fdopen.patch
index 83dfba2b95..95d59c2279 100644
--- a/thirdparty/patches/grpc-zlib-fdopen.patch
+++ b/thirdparty/patches/grpc-zlib-fdopen.patch
@@ -2,8 +2,8 @@ diff -u bazel/grpc_deps.bzl
 --- bazel/grpc_deps.bzl
 +++ bazel/grpc_deps.bzl
 @@ -238,6 +238,9 @@
-                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/madler/zlib/archive/04f42ceca40f73e2978b50e93806c2a18c1281fc.tar.gz",
-                 "https://github.com/madler/zlib/archive/04f42ceca40f73e2978b50e93806c2a18c1281fc.tar.gz",
+                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/madler/zlib/archive/09155eaa2f9270dc4ed1fa13e2b4b2613e6e4851.tar.gz",
+                 "https://github.com/madler/zlib/archive/09155eaa2f9270dc4ed1fa13e2b4b2613e6e4851.tar.gz",
              ],
 +            patches = [
 +                "@io_ray//thirdparty/patches:zlib-fdopen.patch",
diff --git a/thirdparty/patches/grpc-configurable-thread-count.patch b/thirdparty/patches/grpc-configurable-thread-count.patch
index 26387f51a5..f1ae73ec4a 100644
--- a/thirdparty/patches/grpc-configurable-thread-count.patch
+++ b/thirdparty/patches/grpc-configurable-thread-count.patch
@@ -1,7 +1,6 @@
-diff --git src/core/lib/gpr/linux/cpu.cc b/src/core/lib/gpr/linux/cpu.cc
-index 670ca6551c..043021dc4a 100644
---- src/core/lib/gpr/linux/cpu.cc
-+++ src/core/lib/gpr/linux/cpu.cc
+diff --git src/core/util/linux/cpu.cc src/core/util/linux/cpu.cc
+--- src/core/util/linux/cpu.cc
++++ src/core/util/linux/cpu.cc
 @@ -24,6 +24,7 @@
  
  #ifdef GPR_CPU_LINUX
@@ -10,7 +9,7 @@ index 670ca6551c..043021dc4a 100644
  #include <errno.h>
  #include <sched.h>
  #include <string.h>
-@@ -49,7 +50,17 @@ static void init_num_cpus() {
+@@ -50,7 +51,17 @@ static void init_num_cpus() {
  #endif
    // This must be signed. sysconf returns -1 when the number cannot be
    // determined
@@ -27,5 +26,5 @@ index 670ca6551c..043021dc4a 100644
 +      ncpus = static_cast<int>(sysconf(_SC_NPROCESSORS_CONF));
 +  }
    if (ncpus < 1) {
-     gpr_log(GPR_ERROR, "Cannot determine number of CPUs: assuming 1");
+     LOG(ERROR) << "Cannot determine number of CPUs: assuming 1";
      ncpus = 1;
-- 
2.39.5 (Apple Git-154)

