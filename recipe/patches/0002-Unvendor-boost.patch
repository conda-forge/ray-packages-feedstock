From 8d2f25e3548faf50ae7dc12efc78a7c8ab38a3ee Mon Sep 17 00:00:00 2001
From: Austin Morton <austin.morton@aquatic.com>
Date: Tue, 2 Sep 2025 06:31:13 -0500
Subject: [PATCH 2/2] Unvendor boost

---
 bazel/ray_deps_build_all.bzl                       |  2 --
 bazel/ray_deps_setup.bzl                           | 11 -----------
 cpp/BUILD.bazel                                    |  9 ---------
 cpp/src/ray/util/util.cc                           | 10 ++++------
 src/ray/common/asio/asio_util.h                    |  1 +
 src/ray/common/asio/instrumented_io_context.h      |  1 +
 src/ray/gcs/redis_context.cc                       |  7 ++-----
 src/ray/object_manager/plasma/get_request_queue.cc |  2 +-
 src/ray/raylet/worker_pool.h                       |  2 +-
 src/ray/rpc/grpc_client.h                          |  1 +
 10 files changed, 11 insertions(+), 35 deletions(-)

diff --git a/bazel/ray_deps_build_all.bzl b/bazel/ray_deps_build_all.bzl
index 8d59beab32..cfa861b7ec 100644
--- a/bazel/ray_deps_build_all.bzl
+++ b/bazel/ray_deps_build_all.bzl
@@ -1,6 +1,5 @@
 load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
 load("@io_ray//java:dependencies.bzl", "gen_java_deps")
-load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_deps")
 load("@com_github_jupp0r_prometheus_cpp//bazel:repositories.bzl", "prometheus_cpp_repositories")
 load("@com_github_grpc_grpc//third_party/py:python_configure.bzl", "python_configure")
 load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
@@ -14,7 +13,6 @@ load("@rules_foreign_cc_thirdparty//openssl:openssl_setup.bzl", "openssl_setup")
 def ray_deps_build_all():
   bazel_skylib_workspace()
   gen_java_deps()
-  boost_deps()
   prometheus_cpp_repositories()
   python_configure(name = "local_config_python")
   grpc_deps()
diff --git a/bazel/ray_deps_setup.bzl b/bazel/ray_deps_setup.bzl
index 5ece022cdb..ef0e4cdef0 100644
--- a/bazel/ray_deps_setup.bzl
+++ b/bazel/ray_deps_setup.bzl
@@ -167,17 +167,6 @@ def ray_deps_setup():
         ],
     )
 
-    auto_http_archive(
-        name = "com_github_nelhage_rules_boost",
-        # If you update the Boost version, remember to update the 'boost' rule.
-        url = "https://github.com/nelhage/rules_boost/archive/57c99395e15720e287471d79178d36a85b64d6f6.tar.gz",
-        sha256 = "490d11425393eed068966a4990ead1ff07c658f823fd982fddac67006ccc44ab",
-        patches = [
-            "//thirdparty/patches:boost-headers.patch",
-        ],
-        patch_args = ["-p1"],
-    )
-
     http_archive(
         name = "com_github_google_flatbuffers",
         url = "https://github.com/google/flatbuffers/archive/refs/tags/v25.2.10.tar.gz",
diff --git a/cpp/BUILD.bazel b/cpp/BUILD.bazel
index 3164cf7cac..9cc6a45333 100644
--- a/cpp/BUILD.bazel
+++ b/cpp/BUILD.bazel
@@ -165,14 +165,6 @@ pkg_files(
     visibility = ["//visibility:private"],
 )
 
-pkg_files(
-    name = "boost_ray_hdrs_files",
-    srcs = ["@boost//:boost_ray_hdrs"],
-    prefix = "ray/cpp/include/boost/",
-    strip_prefix = "boost",
-    visibility = ["//visibility:private"],
-)
-
 pkg_files(
     name = "default_worker_files",
     srcs = ["default_worker"],
@@ -192,7 +184,6 @@ pkg_files(
 pkg_zip(
     name = "ray_cpp_pkg_zip",
     srcs = [
-        ":boost_ray_hdrs_files",
         ":default_worker_files",
         ":example_files",
         ":libray_api_files",
diff --git a/cpp/src/ray/util/util.cc b/cpp/src/ray/util/util.cc
index 003451b79f..1117fa9e0e 100644
--- a/cpp/src/ray/util/util.cc
+++ b/cpp/src/ray/util/util.cc
@@ -28,14 +28,12 @@ std::string GetNodeIpAddress(const std::string &address) {
   auto parts = ParseAddress(address);
   RAY_CHECK(parts.has_value());
   try {
-    boost::asio::io_service netService;
+    boost::asio::io_context netService;
     boost::asio::ip::udp::resolver resolver(netService);
-    boost::asio::ip::udp::resolver::query query(
-        boost::asio::ip::udp::v4(), (*parts)[0], (*parts)[1]);
-    boost::asio::ip::udp::resolver::iterator endpoints = resolver.resolve(query);
-    boost::asio::ip::udp::endpoint ep = *endpoints;
+    const auto results = resolver.resolve((*parts)[0], (*parts)[1]);
+    if (results.size() == 0) return "";
     boost::asio::ip::udp::socket socket(netService);
-    socket.connect(ep);
+    socket.connect(results.begin()->endpoint());
     boost::asio::ip::address addr = socket.local_endpoint().address();
     return addr.to_string();
   } catch (std::exception &e) {
diff --git a/src/ray/common/asio/asio_util.h b/src/ray/common/asio/asio_util.h
index 38564c8ac0..fe7f22d4a1 100644
--- a/src/ray/common/asio/asio_util.h
+++ b/src/ray/common/asio/asio_util.h
@@ -16,6 +16,7 @@
 
 #include <array>
 #include <boost/asio.hpp>
+#include <boost/asio/deadline_timer.hpp>
 #include <chrono>
 #include <memory>
 #include <string>
diff --git a/src/ray/common/asio/instrumented_io_context.h b/src/ray/common/asio/instrumented_io_context.h
index 120023233a..4f83cb13f9 100644
--- a/src/ray/common/asio/instrumented_io_context.h
+++ b/src/ray/common/asio/instrumented_io_context.h
@@ -15,6 +15,7 @@
 #pragma once
 
 #include <boost/asio.hpp>
+#include <boost/asio/deadline_timer.hpp>
 #include <limits>
 #include <memory>
 #include <string>
diff --git a/src/ray/gcs/redis_context.cc b/src/ray/gcs/redis_context.cc
index 3ee8c564e9..72ca6d24a4 100644
--- a/src/ray/gcs/redis_context.cc
+++ b/src/ray/gcs/redis_context.cc
@@ -571,12 +571,9 @@ std::vector<std::string> ResolveDNS(instrumented_io_context &io_service,
                                     int port) {
   using namespace boost::asio;  // NOLINT
   ip::tcp::resolver resolver(io_service);
-  ip::tcp::resolver::iterator iter = resolver.resolve(address, std::to_string(port));
-  ip::tcp::resolver::iterator end;
   std::vector<std::string> ip_addresses;
-  while (iter != end) {
-    ip::tcp::endpoint endpoint = *iter++;
-    ip_addresses.push_back(endpoint.address().to_string());
+  for (const auto& entry : resolver.resolve(address, std::to_string(port))) {
+    ip_addresses.push_back(entry.endpoint().address().to_string());
   }
   return ip_addresses;
 }
diff --git a/src/ray/object_manager/plasma/get_request_queue.cc b/src/ray/object_manager/plasma/get_request_queue.cc
index 286440f377..16482d1305 100644
--- a/src/ray/object_manager/plasma/get_request_queue.cc
+++ b/src/ray/object_manager/plasma/get_request_queue.cc
@@ -35,7 +35,7 @@ void GetRequest::AsyncWait(
     std::function<void(const boost::system::error_code &)> on_timeout) {
   RAY_CHECK(!is_removed_);
   // Set an expiry time relative to now.
-  timer_.expires_from_now(std::chrono::milliseconds(timeout_ms));
+  timer_.expires_after(std::chrono::milliseconds(timeout_ms));
   timer_.async_wait(on_timeout);
 }
 
diff --git a/src/ray/raylet/worker_pool.h b/src/ray/raylet/worker_pool.h
index 2f8b02e3b5..9916e15845 100644
--- a/src/ray/raylet/worker_pool.h
+++ b/src/ray/raylet/worker_pool.h
@@ -17,7 +17,7 @@
 #include <inttypes.h>
 
 #include <algorithm>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <boost/functional/hash.hpp>
 #include <deque>
 #include <list>
diff --git a/src/ray/rpc/grpc_client.h b/src/ray/rpc/grpc_client.h
index 279d14a4dc..9e1b3846f0 100644
--- a/src/ray/rpc/grpc_client.h
+++ b/src/ray/rpc/grpc_client.h
@@ -17,6 +17,7 @@
 #include <grpcpp/grpcpp.h>
 
 #include <boost/asio.hpp>
+#include <boost/asio/deadline_timer.hpp>
 #include <memory>
 #include <string>
 #include <utility>
-- 
2.43.0

