{% set version = "1.5.0" %}

package:
  name: ray-packages
  version: {{ version }}

source:
  url: https://github.com/ray-project/ray/archive/ray-{{ version }}.tar.gz
  sha256: 88f6721c0fa77065ccbb8949f5f1dfa1d47ec683174d6e8e7b5ffc645a892a94
  patches:
    - patches/0001-Do-not-force-pickle5-in-sys.path.patch
    - patches/0002-Fix-redis-build-for-non-default-compiler-drivers.patch
    - patches/0003-Redis-deps-now-build-but-do-not-link.patch
    - patches/0004-Disable-making-non-core-entry-scripts.patch
    - patches/0005-Contain-bazel-root-and-output-dir-right-above-SRC_DI.patch
    - patches/0006-Do-not-crash-if-BAZEL_SH-not-set-on-Windows.patch
    - patches/0007-Convert-symlinks-to-junctions-on-Windows-before-buil.patch
    - patches/0008-Add-workaround-for-os.path.isdir-on-Windows.patch
    - patches/0009-Include-process.h-for-getpid-explicitly-on-Windows.patch
    - patches/0010-Empty-install-requirements-installed-by-conda-build.patch
    - patches/0011-Ignore-warnings-in-event.cc-and-logging.cc.patch
    - patches/0012-Disable-runfiles-on-windows.patch
    - patches/0013-Add-bazel-linkopts-libs.patch


build:
  number: 0
  skip: true  # [py<36]
  # skip on MacOS as there's some weird compilation issue and I have no MacOS to develop on
  skip: true  # [osx]

# Need these up here for conda-smithy to handle them properly.
requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - bazel <=3.7.2
    - cython >=0.29
    - curl
    - make
    - m2-patch       # [win]

outputs:
  - name: ray-all
    requirements:
      host:
      run:
        - python
        - {{ pin_subpackage('ray-default', exact=True) }}
        # autoscaler is completely disabled for now as it's missing a bunch of dependencies
        # and there's not much interest in adding them (yet).
        # autoscaler does not work on Windows, no point of building it; see below
        #- {{ pin_subpackage('ray-autoscaler', exact=True) }}  # [not win]
        - {{ pin_subpackage('ray-dashboard', exact=True) }}
        #- {{ pin_subpackage('ray-debug', exact=True) }}  # turned off for now, see below
        - {{ pin_subpackage('ray-k8s', exact=True) }}
        - {{ pin_subpackage('ray-rllib', exact=True) }}
        - {{ pin_subpackage('ray-serve', exact=True) }}
        - {{ pin_subpackage('ray-tune', exact=True) }}
    test:
      imports:
        # dummy test; actual tests are in subpackages
        - ray

  - name: ray-core
    script: build-core.sh   # [not win]
    script: build-core.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - bazel <=3.4.1  # [not win]
        - bazel <3.7     # [win]
        - sysroot_linux-64 2.17  # [linux64]
        - curl
        - cython >=0.29
        - make
      host:
        - python
        - pip
        - packaging
        # pickle5 needs to be here, otherwise setup.py tries
        # to install it and it fails on conda-forge Windows CI
        - pickle5  # [py<38]
      run:
        - python
        - click >=7.0
        - colorama
        - dataclasses  # [py<37]
        - filelock
        - grpcio >=1.28.1
        - msgpack-python >=1.0.0, <2.0.0
        - numpy >=1.16
        - pickle5  # [py<38]
        - protobuf >=3.15.3
        - psutil
        - pyyaml
        - redis-py >=3.5.0
        - setproctitle =1.1.10
        # Remove in the next release (1.6.0)
        - pydantic >=1.8
        # Move these to default in next release (1.6.0)
        - aiohttp
        - aiohttp-cors
        - aioredis <2
        # gpustat-0.6.0 has a dependency which does not exist on Windows;
        # skip it there until gpustat is fixed as it is optional
        - gpustat  # [not win]
        - jsonschema
        - requests
        - opencensus
        - prometheus_client >=0.7.1

    test:
      imports:
        - ray
        - ray._raylet
        - ray.actor
        - ray.profiling
        - ray.runtime_context
        - ray.state
        - ray.worker
        # init-code seemingly depends on platform or other ambient things;
        # the following doesn't get triggered in CI, but was a problem in
        # https://github.com/conda-forge/ray-packages-feedstock/issues/16
        - ray._private.metrics_agent
      commands:
        - python -c "import ray; ray.init()"

  - name: ray-default
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - colorful

    test:
      imports:
        # ray-default is a convenience wrapper with no imports of its own
        - ray

  - name: ray-autoscaler
    build:
      # skip autoscaler altogether because right now it's missing a lot of dependencies
      # and no one has volunteered to update those
      skip: true
      # ray autoscaler relies heavily on using POSIX-compliant OpenSSH and rsync,
      # neither of which are available on Windows; they are in WSL, but that is
      # effectively a Linux version from conda point of view
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - azure-cli-core ==2.4.0
        - azure-mgmt-compute ==12.0.0
        - azure-mgmt-msi ==1.0.0
        - azure-mgmt-network ==10.1.0
        - boto3 ==1.4.8
        - google-api-python-client ==1.7.8
        - google-auth
        - kubernetes
    test:
      imports:
        - ray.autoscaler

  - name: ray-dashboard
    build:
      script:
        - cd python/ray/new_dashboard/client
        - npm install
        - npm ci
        - npm run build
        # not sure why this seems to get copied on windows but not linux...
        - mkdir -p $SP_DIR/ray/new_dashboard/client             # [not win]
        - cp -R ./build $SP_DIR/ray/new_dashboard/client/build  # [not win]
    requirements:
      host:
        - nodejs
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
    test:
      imports:
        - ray.new_dashboard
      commands:
        - python -c "import ray; ray.init(include_dashboard=True)"

  - name: ray-debug
    build:
      # some weird incompatibility when installing during tests... disabling for now
      # wild guess is it is caused by py-spy using newer sysroot/glibc
      skip: true
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - py-spy >=0.2.0
    test:
      imports:
        # there doesn't appear to be a debug specific module
        - ray

  - name: ray-k8s
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - kubernetes
        - urllib3
    test:
      imports:
        # there doesn't appear to be a k8s module, not sure how to test this
        - ray

  - name: ray-rllib
    build:
      entry_points:
        - rllib = ray.rllib.scripts:cli
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-tune', exact=True) }}
        - dm-tree
        - gym
        - lz4
        - pyyaml
        - scikit-image
        - scipy
        # Remove in next release (1.6.0)
        # until there is a build of opencv-python-headless which does not require
        # full graphics stack we have to rely on user system having needed
        # graphics libraries installed
        - opencv <=4.30.0

    test:
      imports:
        - ray.rllib
      commands:
        - rllib --help

  - name: ray-serve
    build:
      entry_points:
        - serve = ray.serve.scripts:cli
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - uvicorn
        - requests
        - starlette
        - fastapi
    test:
      imports:
        - ray.serve

  - name: ray-tune
    build:
      entry_points:
        - tune = ray.tune.scripts:cli
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - pandas
        - requests
        - tabulate
        - tensorboardX
    test:
      imports:
        - ray.tune

about:
  home: https://github.com/ray-project/ray
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - licenses/abseil-LICENSE.txt
    - licenses/antirez-redis-COPYING.txt
    - licenses/arrow-LICENSE.txt
    - licenses/boost-LICENSE_1_0.txt
    - licenses/boringssl-LICENSE.txt
    - licenses/deckarep-golang-set-LICENSE.txt
    - licenses/flatbuffers-LICENSE.txt
    - licenses/gabime-spdlog-LICENSE.txt
    - licenses/gflags-COPYING.txt
    - licenses/glog-COPYING.txt
    - licenses/go-logr-LICENSE.txt
    - licenses/googletest-LICENSE.txt
    - licenses/grpc-LICENSE.txt
    - licenses/msgpack-COPYING.txt
    - licenses/onsi-ginkgo-LICENSE.txt
    - licenses/onsi-gomega-LICENSE.txt
    - licenses/opencensus-LICENSE.txt
    - licenses/opencensus-proto-LICENSE.txt
    - licenses/prometheus-LICENSE.txt
    - licenses/redis-hiredis-COPYING.txt
    - licenses/tporadowski-redis-license.txt
    - licenses/zlib-LICENSE.txt
  summary: Ray is a fast and simple framework for building and running distributed applications.
  description: |
    Ray is a fast and simple framework for building and running
    distributed applications.
  doc_url: https://ray.readthedocs.io/
  dev_url: https://github.com/ray-project/ray

extra:
  recipe-maintainers:
    - dHannasch
    - h-vetinari
    - vnlitvinov
    - krfricke
